(window.static_7_109_JobSeeker = window.static_7_109_JobSeeker || []).push([
  [38],
  {
    116: function (e, t, o) {
      "use strict";
      function i(e, t, o) {
        (this.maxSize_ = e || -1),
          (this.debug_ = t || !1),
          (this.storage_ = o || new i.BasicCacheStorage()),
          (this.fillFactor_ = 0.75),
          (this.stats_ = {}),
          (this.stats_.hits = 0),
          (this.stats_.misses = 0),
          this.log_("Initialized cache with size " + e);
      }
      (i.Priority = { LOW: 1, NORMAL: 2, HIGH: 4 }),
        (i.BasicCacheStorage = function () {
          (this.items_ = {}), (this.count_ = 0);
        }),
        (i.BasicCacheStorage.prototype.get = function (e) {
          return this.items_[e];
        }),
        (i.BasicCacheStorage.prototype.set = function (e, t) {
          void 0 === this.get(e) && this.count_++, (this.items_[e] = t);
        }),
        (i.BasicCacheStorage.prototype.size = function (e, t) {
          return this.count_;
        }),
        (i.BasicCacheStorage.prototype.remove = function (e) {
          var t = this.get(e);
          return void 0 !== t && this.count_--, delete this.items_[e], t;
        }),
        (i.BasicCacheStorage.prototype.keys = function () {
          var e,
            t = [];
          for (e in this.items_) t.push(e);
          return t;
        }),
        (i.LocalStorageCacheStorage = function (e) {
          this.prefix_ = "cache-storage." + (e || "default") + ".";
          var t = this.prefix_.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
          this.regexp_ = new RegExp("^" + t);
        }),
        (i.LocalStorageCacheStorage.prototype.get = function (e) {
          var t = window.localStorage[this.prefix_ + e];
          return t ? JSON.parse(t) : null;
        }),
        (i.LocalStorageCacheStorage.prototype.set = function (e, t) {
          window.localStorage[this.prefix_ + e] = JSON.stringify(t);
        }),
        (i.LocalStorageCacheStorage.prototype.size = function (e, t) {
          return this.keys().length;
        }),
        (i.LocalStorageCacheStorage.prototype.remove = function (e) {
          var t = this.get(e);
          return delete window.localStorage[this.prefix_ + e], t;
        }),
        (i.LocalStorageCacheStorage.prototype.keys = function () {
          var e,
            t = [];
          for (e in window.localStorage)
            e.match(this.regexp_) && t.push(e.replace(this.prefix_, ""));
          return t;
        }),
        (i.prototype.getItem = function (e) {
          var t = this.storage_.get(e);
          null != t &&
            (this.isExpired_(t)
              ? (this.removeItem(e), (t = null))
              : (t.lastAccessed = new Date().getTime()));
          var o = t ? t.value : null;
          return (
            o
              ? (this.stats_.hits++, this.log_("Cache HIT for key " + e))
              : (this.stats_.misses++, this.log_("Cache MISS for key " + e)),
            o
          );
        }),
        (i._CacheItem = function (e, t, o) {
          if (!e) throw new Error("key cannot be null or empty");
          (this.key = e),
            (this.value = t),
            (o = o || {}).expirationAbsolute &&
              (o.expirationAbsolute = o.expirationAbsolute.getTime()),
            o.priority || (o.priority = i.Priority.NORMAL),
            (this.options = o),
            (this.lastAccessed = new Date().getTime());
        }),
        (i.prototype.setItem = function (e, t, o) {
          if (
            (null != this.storage_.get(e) && this.removeItem(e),
            this.addItem_(new i._CacheItem(e, t, o)),
            this.log_("Setting key " + e),
            this.maxSize_ > 0 && this.size() > this.maxSize_)
          ) {
            var n = this;
            setTimeout(function () {
              n.purge_.call(n);
            }, 0);
          }
        }),
        (i.prototype.clear = function () {
          for (var e = this.storage_.keys(), t = 0; t < e.length; t++)
            this.removeItem(e[t]);
          this.log_("Cache cleared");
        }),
        (i.prototype.getStats = function () {
          return this.stats_;
        }),
        (i.prototype.toHtmlString = function () {
          for (
            var e = this.size() + " item(s) in cache<br /><ul>",
              t = this.storage_.keys(),
              o = 0;
            o < t.length;
            o++
          ) {
            var i = this.storage_.get(t[o]);
            e =
              e +
              "<li>" +
              i.key.toString() +
              " = " +
              i.value.toString() +
              "</li>";
          }
          return (e += "</ul>");
        }),
        (i.prototype.resize = function (e) {
          this.log_("Resizing Cache from " + this.maxSize_ + " to " + e);
          var t = this.maxSize_;
          (this.maxSize_ = e),
            e > 0 && (t < 0 || e < t) && this.size() > e && this.purge_(),
            this.log_("Resizing done");
        }),
        (i.prototype.purge_ = function () {
          var e = new Array(),
            t = Math.round(this.maxSize_ * this.fillFactor_);
          this.maxSize_ < 0 && (t = this.size() * this.fillFactor_);
          for (var o = this.storage_.keys(), i = 0; i < o.length; i++) {
            var n = o[i],
              a = this.storage_.get(n);
            this.isExpired_(a) ? this.removeItem(n) : e.push(a);
          }
          if (e.length > t)
            for (
              e = e.sort(function (e, t) {
                return e.options.priority != t.options.priority
                  ? t.options.priority - e.options.priority
                  : t.lastAccessed - e.lastAccessed;
              });
              e.length > t;

            ) {
              var r = e.pop();
              this.removeItem(r.key);
            }
          this.log_("Purged cached");
        }),
        (i.prototype.addItem_ = function (e, t) {
          try {
            this.storage_.set(e.key, e);
          } catch (o) {
            if (t)
              throw (
                (this.log_("Failed setting again, giving up: " + o.toString()),
                o)
              );
            this.log_(
              "Error adding item, purging and trying again: " + o.toString()
            ),
              this.purge_(),
              this.addItem_(e, !0);
          }
        }),
        (i.prototype.removeItem = function (e) {
          var t = this.storage_.remove(e);
          return (
            this.log_("removed key " + e),
            t &&
              t.options &&
              t.options.callback &&
              setTimeout(function () {
                t.options.callback.call(null, t.key, t.value);
              }, 0),
            t ? t.value : null
          );
        }),
        (i.prototype.removeWhere = function (e) {
          for (var t = this.storage_.keys(), o = 0; o < t.length; o++) {
            var i = t[o];
            !0 === e(i, this.storage_.get(i).value) && this.removeItem(i);
          }
        }),
        (i.prototype.size = function () {
          return this.storage_.size();
        }),
        (i.prototype.isExpired_ = function (e) {
          var t = new Date().getTime(),
            o = !1;
          (e.options.expirationAbsolute &&
            e.options.expirationAbsolute < t &&
            (o = !0),
          !o && e.options.expirationSliding) &&
            e.lastAccessed + 1e3 * e.options.expirationSliding < t &&
            (o = !0);
          return o;
        }),
        (i.prototype.log_ = function (e) {
          this.debug_;
        }),
        /*!
         * Naukri.com Cache Library
         * http://www.naukri.com/
         *
         * Author: Rahul Batra (rahul.batra@naukri.com, rahul.batra@gmail.com)
         * Copyright 2014 Naukri.com
         */
        (i.UserDataCacheStorage = function (e) {
          e = e;
          var t = document.createElement("div");
          (t.style.display = "none"),
            document.getElementsByTagName("head")[0].appendChild(t),
            t.addBehavior("#default#userdata"),
            (this.get = function (o) {
              t.load(e);
              var i = t.getAttribute(o);
              return i ? $.parseJSON(i) : null;
            }),
            (this.set = function (o, i) {
              t.load(e), t.setAttribute(o, $.stringify(i)), t.save(e);
            }),
            (this.size = function (e, o) {
              return t.XMLDocument.documentElement.attributes.length;
            }),
            (this.remove = function (o) {
              t.load(e), t.removeAttribute(o), t.save(e);
            }),
            (this.keys = function () {
              t.load(e);
              for (
                var o, i = -1, n = [];
                (o = t.XMLDocument.documentElement.attributes[++i]);

              )
                n.push(o.name);
              return n;
            });
        });
      /*!
       * Naukri.com Cache Library
       * http://www.naukri.com/
       *
       * Author: Rahul Batra (rahul.batra@naukri.com, rahul.batra@gmail.com)
       * Copyright 2014 Naukri.com
       */
      var n = function () {};
      (n.getCache = function (e, t) {
        if (void 0 === e || parseInt(e) <= 0)
          throw new "Invalid app id: "() + e;
        t = t || "localStorage";
        var o = window.navigator.userAgent.match(/MSIE 7/),
          n = null;
        if (
          ("localStorage" == t &&
            (o
              ? (n = new i.UserDataCacheStorage(String(e)))
              : void 0 !== window.localStorage &&
                (n = new i.LocalStorageCacheStorage(String(e)))),
          null == n)
        )
          throw "Unsupported storage type: " + t;
        return new i(-1, !1, n);
      }),
        (t.a = n);
    },
    302: function (e, t) {
      function o(e, t) {
        var o = Object.keys(e);
        if (Object.getOwnPropertySymbols) {
          var i = Object.getOwnPropertySymbols(e);
          t &&
            (i = i.filter(function (t) {
              return Object.getOwnPropertyDescriptor(e, t).enumerable;
            })),
            o.push.apply(o, i);
        }
        return o;
      }
      function i(e, t, o) {
        return (
          t in e
            ? Object.defineProperty(e, t, {
                value: o,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (e[t] = o),
          e
        );
      }
      window.sendUbaTrackingForLocation = function (e) {
        var t = e.eventName,
          n = (e.pageName, e.keyNames);
        window.ub &&
          window.ub.track(
            t,
            (function (e) {
              for (var t = 1; t < arguments.length; t++) {
                var n = null != arguments[t] ? arguments[t] : {};
                t % 2
                  ? o(Object(n), !0).forEach(function (t) {
                      i(e, t, n[t]);
                    })
                  : Object.getOwnPropertyDescriptors
                  ? Object.defineProperties(
                      e,
                      Object.getOwnPropertyDescriptors(n)
                    )
                  : o(Object(n)).forEach(function (t) {
                      Object.defineProperty(
                        e,
                        t,
                        Object.getOwnPropertyDescriptor(n, t)
                      );
                    });
              }
              return e;
            })({ pageName: "homepage" }, n, { referrer: document.referrer })
          );
      };
    },
    303: function (e, t, o) {
      var i = o(304);
      "string" == typeof i && (i = [[e.i, i, ""]]);
      var n = { hmr: !0, transform: void 0, insertInto: void 0 };
      o(34)(i, n);
      i.locals && (e.exports = i.locals);
    },
    304: function (e, t, o) {},
    358: function (e, t, o) {
      "use strict";
      o.r(t);
      o(302);
      var i = o(116);
      function n() {
        new GeoLocationManager({
          geoOptions: {
            maximumAge: 864e5,
            timeout: 1e4,
            enableHighAccuracy: !0,
          },
          successCallBack: function (e) {
            !(function () {
              i.a
                .getCache("latLongCache")
                .setItem(
                  "latLong",
                  Array.prototype.slice.call(arguments).join("_")
                );
            })(e.coords.latitude, e.coords.longitude);
            var t = i.a.getCache("geoCache");
            JSON.parse(t.getItem("geoLocSubscription")) ||
              (window.dataLayer &&
                !isEmailinURL() &&
                (dataLayer.push({
                  event: "_trackEvent",
                  "event-category": "GeoLocationConsent",
                  "event-label": "EnabledDesktop",
                  "event-action": "click",
                }),
                sendUbaTrackingForLocation({
                  eventName: "widgetClick",
                  keyNames: {
                    actionType: "click",
                    widgetName: ["geo-location-widget"],
                    actionSrc: "geo-location-consent-enabled",
                  },
                }))),
              a();
          },
          errorCallback: function (e) {
            throw (
              (window.dataLayer &&
                1 == e.code &&
                !isEmailinURL() &&
                (dataLayer.push({
                  event: "_trackEvent",
                  "event-category": "GeoLocationConsent",
                  "event-label": "BlockedDesktop",
                  "event-action": "click",
                }),
                a()),
              sendUbaTrackingForLocation({
                eventName: "widgetClick",
                keyNames: {
                  actionType: "click",
                  widgetName: ["geo-location-widget"],
                  actionSrc: "geo-location-consent-disabled",
                },
              }),
              new Error("geoError" + e.code))
            );
          },
        });
      }
      function a() {
        var e = "https://www.naukri.com/notifysw.js";
        window.testPayload && (e = "https://www.naukri.com/notifysw1.js");
        new WebPushHandler(e);
      }
      (window.GeoLocationManager = function (e) {
        (this.geoOptions = e.geoOptions),
          (this.successCb = e.successCallBack),
          (this.errorCb = e.errorCallback),
          this.init();
      }),
        (GeoLocationManager.prototype.geoSuccessCb = function (e) {
          (this.successCb(e), "undefined" != typeof Storage) &&
            i.a.getCache("geoCache").setItem("geoLocSubscription", !0);
        }),
        (GeoLocationManager.prototype.geoErrorCb = function (e) {
          this.errorCb(e);
        }),
        (GeoLocationManager.prototype.isSubscribed = function () {
          if ("undefined" != typeof Storage) {
            var e = i.a.getCache("geoCache");
            return JSON.parse(e.getItem("geoLocSubscription")) || null;
          }
        }),
        (GeoLocationManager.prototype.askUserConsent = function () {
          navigator.geolocation.getCurrentPosition(
            this.geoSuccessCb.bind(this),
            this.geoErrorCb.bind(this)
          ),
            sendUbaTrackingForLocation({
              eventName: "widgetView",
              keyNames: {
                actionType: "view",
                widgetName: ["geo-location-widget"],
              },
            }),
            dataLayer &&
              !isEmailinURL() &&
              dataLayer.push({
                event: "_trackEvent",
                "event-category": "GeoLocationWidget",
                "event-label": "GeoLocation",
                "event-action": "view",
              });
        }),
        (GeoLocationManager.prototype.init = function () {
          "geolocation" in navigator &&
            (this.isSubscribed()
              ? this.askUserConsent()
              : this.initCustomPopUp());
        }),
        (GeoLocationManager.prototype.initCustomPopUp = function () {
          if ("undefined" != typeof Storage) {
            var e = i.a.getCache("geoCache"),
              t = JSON.parse(e.getItem("geoLocData"));
            (!t || (new Date().getTime() > t.expires && t.geoLocFreq < 3)) &&
              ($("#geoLocPopUp").length ||
                $("body").append(
                  '<div id="geoLocPopUp" class="userPrompt"><div><p class="caption">Share your location with Naukri.com for more relevant jobs</p><p class="desc">You can turn them off anytime from browser settings</p></div><span id="block" class="fr geoLocBtn later">Later</span><span id="allow" class="fr geoLocBtn sure">Sure</span></div>'
                ),
              setTimeout(function () {
                $(".userPrompt").addClass("animate");
              }, 10),
              this.bindEvents());
          }
        }),
        (GeoLocationManager.prototype.bindEvents = function () {
          var e = this,
            t = $("#geoLocPopUp");
          t &&
            (t.on("click", "#allow", function () {
              if (
                ($("#geoLocPopUp").hide(),
                window.dataLayer && e.trackSure(),
                "undefined" != typeof Storage)
              ) {
                var t = i.a.getCache("geoCache"),
                  o = JSON.parse(t.getItem("geoLocData")) || {},
                  n = new Date().getTime() + 864e5,
                  a = o.geoLocFreq || 0;
                (o.expires = n),
                  (o.geoLocFreq = a),
                  t.setItem("geoLocData", JSON.stringify(o));
              }
              e.askUserConsent();
            }),
            t.on("click", "#block", function () {
              if (
                ($("#geoLocPopUp").hide(),
                window.dataLayer && e.trackNotifyMeLater(),
                "undefined" != typeof Storage)
              ) {
                var t = i.a.getCache("geoCache"),
                  o = JSON.parse(t.getItem("geoLocData")) || {},
                  n = o.geoLocFreq || 0,
                  a = new Date().getTime() + 1296e6;
                (n += 1),
                  (o.expires = a),
                  (o.geoLocFreq = n),
                  t.setItem("geoLocData", JSON.stringify(o));
              }
            })),
            sendUbaTrackingForLocation({
              eventName: "widgetView",
              keyNames: {
                actionType: "view",
                widgetName: ["naukri-geo-location-widget"],
              },
            }),
            dataLayer &&
              !isEmailinURL() &&
              dataLayer.push({
                event: "_trackEvent",
                "event-category": "NaukriGeoLocationWidget",
                "event-label": "NaukriGeoLocation",
                "event-action": "view",
              });
        }),
        (GeoLocationManager.prototype.trackNotifyMeLater = function () {
          try {
            isEmailinURL() ||
              dataLayer.push({
                event: "_trackEvent",
                "event-category": "GeoLocationConsent",
                "event-label": "NotifyLaterDesktop",
                "event-action": "click",
              }),
              sendUbaTrackingForLocation({
                eventName: "widgetClick",
                keyNames: {
                  actionType: "click",
                  widgetName: ["naukri-geo-location-widget"],
                  actionSrc: "naukri-geo-consent-notify-later-desktop",
                },
              });
          } catch (e) {
            throw new Error(e);
          }
        }),
        (GeoLocationManager.prototype.trackSure = function () {
          try {
            isEmailinURL() ||
              dataLayer.push({
                event: "_trackEvent",
                "event-category": "GeoLocationConsent",
                "event-label": "SureDesktop",
                "event-action": "click",
              }),
              sendUbaTrackingForLocation({
                eventName: "widgetClick",
                keyNames: {
                  actionType: "click",
                  widgetName: ["naukri-geo-location-widget"],
                  actionSrc: "naukri-geo-consent-sure-desktop",
                },
              });
          } catch (e) {
            throw new Error(e);
          }
        }),
        (window.WebPushHandler = function (e) {
          var t = this;
          (t.hasSubscription = !1),
            "serviceWorker" in navigator &&
              navigator.serviceWorker
                .register(e)
                .then(function () {
                  t.initNotification();
                })
                .catch(function (e) {
                  throw new Error("registration failed :" + e);
                });
        }),
        (WebPushHandler.prototype.initNotification = function (e) {
          "showNotification" in ServiceWorkerRegistration.prototype
            ? "denied" === Notification.permission
              ? window.dataLayer && this.trackBlockNotification()
              : "PushManager" in window &&
                (e ? this.subscribe() : this.isSubscribed())
            : navigator;
        }),
        (WebPushHandler.prototype.subscribe = function () {
          var e = this;
          navigator.serviceWorker.ready.then(function (t) {
            t.pushManager
              .subscribe({ userVisibleOnly: !0 })
              .then(function (t) {
                var o = e.getRegistrationId(t);
                if ((e.saveRegistrationId(o), "geolocation" in navigator)) {
                  var n = i.a.getCache("geoCache");
                  JSON.parse(n.getItem("geoLocSubscription")) ||
                    askGeoLocationPermission();
                }
                window.dataLayer && e.trackSubscription();
              })
              .catch(function (e) {
                throw "denied" === Notification.permission
                  ? new Error("Permission for Notifications was denied" + e)
                  : new Error(e);
              });
          });
        }),
        (WebPushHandler.prototype.isSubscribed = function () {
          var e = this;
          navigator.serviceWorker.ready.then(function (t) {
            t.pushManager
              .getSubscription()
              .then(function (t) {
                if (t) {
                  if (((e.hasSubscription = !0), "geolocation" in navigator)) {
                    var o = i.a.getCache("geoCache");
                    JSON.parse(o.getItem("geoLocSubscription")) ||
                      askGeoLocationPermission();
                  }
                } else e.hasSubscription = !1;
              })
              .catch(function (e) {
                throw new Error(e);
              });
          });
        }),
        (WebPushHandler.prototype.getRegistrationId = function (e) {
          return e.subscriptionId ? e.subscriptionId : e.endpoint;
        }),
        (WebPushHandler.prototype.sendWelcomeMessage = function () {
          Notification.requestPermission(function (e) {
            "granted" === e &&
              navigator.serviceWorker.ready.then(function (e) {
                e.showNotification("Naukri.com", {
                  body:
                    "Thanks. We will start sending you job recommendations soon.",
                  icon: "//static.naukimg.com/s/4/100/i/naukriLogo192x192.png",
                  badge: "//static.naukimg.com/s/4/100/i/push-badge.png",
                  data: { isWelcome: 1 },
                });
              });
          });
        }),
        (WebPushHandler.prototype.saveRegistrationId = function (e) {
          var t = this,
            o = window.saveNotifyDevice;
          return fetch(o, {
            method: "POST",
            mode: "cors",
            headers: new Headers({
              Accept: "application/json",
              "Content-Type": "application/json",
              "X-Requested-With": "XMLHttpRequest",
            }),
            body: JSON.stringify({ endpoint: e, appId: 109 }),
            credentials: "include",
          })
            .then(function () {
              t.sendWelcomeMessage();
            })
            .catch(function () {});
        }),
        (WebPushHandler.prototype.trackSubscription = function () {
          try {
            isEmailinURL() ||
              dataLayer.push({
                event: "_trackEvent",
                "event-category": "BNotification",
                "event-label": "EnabledDesktop",
                "event-action": "click",
              });
          } catch (e) {
            throw new Error(e);
          }
        }),
        (WebPushHandler.prototype.trackBlockNotification = function () {
          try {
            isEmailinURL() ||
              dataLayer.push({
                event: "_trackEvent",
                "event-category": "BNotification",
                "event-label": "BlockedDesktop",
                "event-action": "click",
              });
          } catch (e) {
            throw new Error(e);
          }
        }),
        window.addEventListener("load", function () {
          setTimeout(function () {
            var e =
              navigator.userAgent.toLowerCase().indexOf("chrome") > -1 ||
              navigator.userAgent.toLowerCase().indexOf("CriOS") > -1;
            "serviceWorker" in navigator && e && window.saveNotifyDevice
              ? "geolocation" in navigator &&
                Math.floor(10 * Math.random()) + 1 <= 5
                ? n()
                : a()
              : "geolocation" in navigator && n();
          }, 1e4);
        });
      o(303);
    },
  },
]);
