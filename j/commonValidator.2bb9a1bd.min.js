(window.static_7_109_JobSeeker = window.static_7_109_JobSeeker || []).push([
  [12],
  {
    81: function (e, t) {
      function r(e) {
        return (r =
          "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
            ? function (e) {
                return typeof e;
              }
            : function (e) {
                return e &&
                  "function" == typeof Symbol &&
                  e.constructor === Symbol &&
                  e !== Symbol.prototype
                  ? "symbol"
                  : typeof e;
              })(e);
      }
      window.commonValidator = function () {
        var e = !1,
          t = {
            validate: function (e) {
              var r = t;
              (r.onErr = e.onError || null),
                (r.onValid = e.onValid || null),
                (r.befSbt = e.beforeSubmit || null),
                (r.disSbt = e.disableSubmit || null),
                (r.lastErr = null),
                (r.isVld = null),
                (r.erArry = {}),
                (r.erArryExt = {}),
                (r.noVld = !1),
                (r.errs = e.errors || commonErrList),
                (r.cFocus = e.clearOnFocus || !1),
                (r.eFocus = !1 !== e.focusOnError);
              var a = !1 !== e.inlineErrors;
              if (e.messageBox)
                var l = e.messageBox.id || null,
                  s = e.messageBox.content || null,
                  n = e.messageBox.hideOthers || !1;
              else s = null;
              if (e.styles) {
                var i = e.styles.errorClass || null,
                  o = e.styles.okClass || null,
                  c = e.styles.softMandClass || null;
                (u = e.styles.parentObjectClass || null),
                  (h = e.styles.maxLevel || 1);
              } else {
                (i = "err"), (o = "ok"), (c = "softMand");
                var u = null,
                  h = 1;
              }
              var p = e.formNames || null,
                d = e.defaultEvents || null,
                m = e.submitButton || null,
                f = e.fireDelay || 0;
              if (p.constructor === Array)
                for (var v = 0; v < p.length; v++)
                  r.validInit(p[v], m, i, o, c, u, h, l, s, n, a, d, f);
              else r.validInit(p, m, i, o, c, u, h, l, s, n, a, d, f);
            },
            validInit: function (r, a, l, s, n, i, o, c, u, h, p, d, m) {
              var f,
                v,
                g,
                k = t,
                C = $("form[name=" + r + "]").get(0);
              if (!C) {
                var b = new Error(r);
                throw ((b.name = "CommonValidator Form"), b);
              }
              if (
                ((k.fName = r),
                (k[r] = { pExist: i, pLevel: o }),
                k.checkEvents(C, l, s, n, p, d),
                a)
              ) {
                var E = k.getSbtBtns($(C), a, !0),
                  y = E[1];
                for (v = E[0], f = 0; f < v.length; f++)
                  "submit" != v[f].attr("type") &&
                    ("" != v[f].attr("rel") && "noValidate" == v[f].attr("rel")
                      ? $(C).on("click", y, function () {
                          (k.noVld = !0), $(C).submit();
                        })
                      : $(C).on("click", y, function () {
                          setTimeout(function () {
                            k.isVld = k.checkSubmit(C, a, l, s, n, c, u, h, p);
                          }, parseInt(m));
                        }));
              }
              $(C).submit(function () {
                return (
                  (e = !0),
                  0 === parseInt(m)
                    ? ((g =
                        !!k.noVld || k.checkSubmit(C, a, l, s, n, c, u, h, p)),
                      k.befSbt &&
                        k.befSbt({
                          err: k.erArryExt,
                          formName: r,
                          isSubmit: e,
                        }),
                      (e = !1),
                      !k.disSbt && g)
                    : (setTimeout(function () {
                        (g =
                          !!k.noVld ||
                          k.checkSubmit(C, a, l, s, n, c, u, h, p)),
                          k.befSbt &&
                            k.befSbt({
                              err: k.erArryExt,
                              formName: r,
                              isSubmit: e,
                            }),
                          !k.disSbt &&
                            g &&
                            (k.sanitizeDefaultValues(C), $(C).get(0).submit()),
                          (e = !1);
                      }, parseInt(m)),
                      !1)
                );
              });
            },
            setDefaultValues: function (e) {
              var r,
                a = t,
                l = e ? $(e) : $("form[name=" + a.fName + "]"),
                s = a.getFrmElms($(l), !0);
              for (r = 0; r < s.length; r++)
                ("" != s[r].val() && s[r].val() != s[r].attr("placeholder")) ||
                  (s[r].val(s[r].attr("placeholder")),
                  s[r].css({ color: "#a9a9a9" })),
                  s[r].on("focus blur", function (e) {
                    n(e, $(this));
                  });
              var n = function (e, t) {
                t.val() == t.attr("placeholder") && "focus" == e.type
                  ? (t.val(""), t.css({ color: "" }))
                  : ("" != t.val() && t.val() != t.attr("placeholder")) ||
                    "blur" != e.type ||
                    (t.val(t.attr("placeholder")), t.css({ color: "#a9a9a9" }));
              };
            },
            sanitizeDefaultValues: function (e) {
              var r,
                a = t,
                l = e ? $(e) : $("form[name=" + a.fName + "]"),
                s = a.getFrmElms($(l), !0);
              for (r = 0; r < s.length; r++)
                s[r].val() == s[r].attr("placeholder") && s[r].val("");
            },
            checkEvents: function (e, r, a, l, s, n) {
              var i,
                o,
                c = t,
                u = null,
                h = c.getFrmElms($(e), !1);
              for (i = 0; i < h.length; i++) {
                var p = h[i].attr("rel").split("|")[0];
                if (
                  (h[i].attr("rel").split("|")[1] || n) &&
                  (n && n.constructor !== Array && (n = new Array(n)),
                  (u = h[i].attr("rel").split("|")[1]
                    ? h[i].attr("rel").split("|")[1].split(",")
                    : n))
                )
                  for (o = 0; o < u.length; o++)
                    h[i].on(
                      u[o],
                      (function (e, t, r, a, l, n) {
                        return function (i) {
                          c.checkValids(e, t, i, r, a, l, n, s);
                        };
                      })(p, h[i], e, r, a, l)
                    );
                c.cFocus &&
                  h[i].on(
                    "focus",
                    (function (e, t, r, a, l, s) {
                      return function (n) {
                        c.clearError(n, e, t, r, a, l, s, !0);
                      };
                    })(p, h[i], e, r, a, l)
                  );
              }
            },
            checkSubmit: function (e, r, a, l, s, n, i, o, c) {
              var u,
                h,
                p,
                d,
                m = t,
                f = !1,
                v = m.getFrmElms($(e), !1),
                g = m.getSbtBtns($(e), r);
              for (
                o && $(".mgBox").hide(),
                  $(e).attr("chk", !1),
                  m.erArry = {},
                  m.erArryExt = {},
                  u = 0;
                u < g.length;
                u++
              )
                "" != g[u].attr("rel") &&
                  $.trim(g[u].attr("rel")).length &&
                  "noValidate" != g[u].attr("rel") &&
                  ((d = "custom:" + g[u].attr("rel").split("|")[0]),
                  (p = m.checkValids(d, g[u], "submit", e, a, l, s, c)),
                  f || p || (f = !0));
              for (x = v.length - 1; x >= 0; x--)
                (h = v[x].attr("rel").split("|")[0]),
                  (p = m.checkValids(h, v[x], "submit", e, a, l, s, c)),
                  f || p || (f = !0);
              if (m.lastErr && "true" == $(e).attr("chk")) {
                if (n) {
                  if (
                    ($("#" + n + "_cMsgCnt") &&
                      $("#" + n + "_cMsgCnt").remove(),
                    i)
                  ) {
                    var k,
                      C = [],
                      b = $("<div>");
                    for (k in (b.attr("id", n + "_cMsgCnt"), m.erArry))
                      C.push(m.erArry[k]);
                    if (i.customContent) {
                      var E = i.customContent,
                        y = $("<p>");
                      y.html(E), b.append(y);
                    }
                    if (i.errorMessages) {
                      var x,
                        V = $("<ul>");
                      for (x = C.length - 1; x >= 0; x--) {
                        var S = $("<li>");
                        S.html(C[x]), V.append(S);
                      }
                      b.append(V);
                    }
                    if (i.errorCount) {
                      var A = i.errorCount,
                        w = $("<p>");
                      (A =
                        1 != A
                          ? A.replace("[errCount]", C.length)
                          : "Total " + C.length + " errors found in the form."),
                        w.html(A),
                        b.append(w);
                    }
                    $("#" + n).append(b);
                  }
                  $("#" + n).show();
                }
                m.eFocus &&
                  (m.lastErr.obj
                    ? $(m.lastErr.objCont).focus()
                    : m.lastErr.focus());
              } else n && $("#" + n).hide();
              return !f;
            },
            clearError: function (e, r, a, l, s, n, i) {
              var o,
                c = t,
                u = r.split(","),
                h = "";
              for (o = 0; o < u.length; o++)
                (h = c.errs[u[o].split(":")[1]] || u[o].split(":")[1])
                  .constructor === Function && (h = h()),
                  c.heighlightErrOk(h, a, l, "rem", s, n, i);
            },
            isValid: function (e) {
              var r,
                a,
                l = t,
                s = e ? $("#" + e) : $("form[name=" + l.fName + "]"),
                n = !1;
              if ("form" == s.get(0).nodeName.toLowerCase()) {
                var i = l.getFrmElms(s, !1);
                for (r = i.length - 1; r >= 0; r--)
                  "button" != i[r].attr("type") &&
                    "submit" != i[r].attr("type") &&
                    "" != i[r].attr("rel") &&
                    i[r].attr("rel").split("|")[0].indexOf("softReq") < 0 &&
                    ((a = i[r].attr("rel").split("|")[0]),
                    n || (l.checkValids(a, i[r]) && (n = !0)));
                return !n;
              }
              if ("" != s.attr("rel")) {
                var o = s.attr("rel").split("|")[0];
                return !l.checkValids(o, s);
              }
            },
            isValidSrv: function (e) {
              var a = t,
                l = a.validators;
              function s(e, t, s, n, i, o, c, u, h, p, d) {
                switch (e) {
                  case "required":
                    return l.reqChk(t, d);
                  case "alphaDS":
                    return l.alphadsChk(t, d);
                  case "alpha":
                    return l.alphaChk(t, d);
                  case "num":
                    return l.numChk(t, d);
                  case "float":
                    return l.floatChk(t, d);
                  case "alphanum":
                    return l.alphanumChk(t, d);
                  case "email":
                    return l.emailChk(t, d);
                  case "specialChar":
                    return l.splChk(t, d);
                  case "charRange":
                    return l.rangeChk(t, i, o, h);
                  case "valRange":
                    return l.rangeVChk(t, c, u, h);
                  case "checked":
                    return l.checkedChkSrv(t);
                  case "selected":
                    return l.selectedChkSrv(t, n);
                  case "custom":
                    var m = a.errs[d];
                    fn = this[m.func];
                    var f = fn.apply(this, m.fields);
                    return "object" == r(f) && 0 == f.msg && (f = ""), f;
                }
              }
              (a.errs = e.custom || {}), (a.errs.__proto__ = commonErrList);
              for (
                var n = e.name,
                  i = e.val || "",
                  o = (e.custom, ""),
                  c = arr[n],
                  u = c.rel.split(","),
                  h = (c.defVal, c.defSelected || "-1"),
                  p = c.minL || null,
                  d = c.maxL || null,
                  m = c.minV || null,
                  f = c.maxV || null,
                  v = c.scope || "in",
                  g = 0;
                g < u.length;

              )
                if (
                  s(
                    u[g].split(":")[0],
                    i,
                    0,
                    h,
                    p,
                    d,
                    m,
                    f,
                    v,
                    0,
                    u[g].split(":")[1]
                  )
                ) {
                  if (
                    ((o +=
                      n +
                      ":" +
                      u[g].split(":")[0] +
                      ">" +
                      u[g].split(":")[1] +
                      ">"),
                    "custom" != u[g].split(":")[0])
                  )
                    o += (a.errs[u[g].split(":")[1]].msg
                      ? a.errs[u[g].split(":")[1]].msg
                      : a.errs[u[g].split(":")[1]]
                    )
                      .replace("[currVal]", i)
                      .replace("[MinL]", p)
                      .replace("[MaxL]", d)
                      .replace("[MinV]", m)
                      .replace("[MaxV]", f);
                  else
                    o += s(
                      "custom",
                      i,
                      0,
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      0,
                      u[g].split(":")[1]
                    );
                  (g = u.length + 1), (o += ",");
                } else g++;
              return 0 == (o += ";").lastIndexOf(";") && (o = ""), o;
            },
            checkValids: function (e, r, a, l, s, n, i, o) {
              var c,
                u = t,
                h = !1,
                p = 0,
                d = !1,
                m = !1;
              if (
                (2 == arguments.length
                  ? ((h = !0), (p = 1))
                  : 9 != a.keyCode &&
                    16 != a.keyCode &&
                    17 != a.keyCode &&
                    18 != a.keyCode &&
                    35 != a.keyCode &&
                    36 != a.keyCode &&
                    27 != a.keyCode &&
                    20 != a.keyCode &&
                    13 != a.keyCode &&
                    (p = 1),
                1 == p)
              ) {
                var f,
                  v = !1,
                  g = "",
                  k = e.split(",");
                for (f = 0; f < k.length; f++)
                  if (!v)
                    switch (k[f].split(":")[0]) {
                      case "softReq":
                        (c =
                          r.attr("placeholder") &&
                          r.val() == r.attr("placeholder")
                            ? ""
                            : r.val()),
                          h
                            ? !d &&
                              (d = u.validators.reqChk(c, k[f].split(":")[1]))
                            : ((v = u.validators.reqChk(c, k[f].split(":")[1])),
                              (g = k[f].split(":")[1]),
                              (m = !!v));
                        break;
                      case "required":
                        (c =
                          r.attr("placeholder") &&
                          r.val() == r.attr("placeholder")
                            ? ""
                            : r.val()),
                          h
                            ? !d &&
                              (d = u.validators.reqChk(c, k[f].split(":")[1]))
                            : ((v = u.validators.reqChk(c, k[f].split(":")[1])),
                              (g = k[f].split(":")[1]));
                        break;
                      case "alphaDS":
                        r.attr("placeholder") &&
                        r.val() == r.attr("placeholder")
                          ? (v = !1)
                          : h
                          ? !d &&
                            (d = u.validators.alphadsChk(
                              r.val(),
                              k[f].split(":")[1]
                            ))
                          : ((v = u.validators.alphadsChk(
                              r.val(),
                              k[f].split(":")[1]
                            )),
                            (g = k[f].split(":")[1]));
                        break;
                      case "alpha":
                        r.attr("placeholder") &&
                        r.val() == r.attr("placeholder")
                          ? (v = !1)
                          : h
                          ? !d &&
                            (d = u.validators.alphaChk(
                              r.val(),
                              k[f].split(":")[1]
                            ))
                          : ((v = u.validators.alphaChk(
                              r.val(),
                              k[f].split(":")[1]
                            )),
                            (g = k[f].split(":")[1]));
                        break;
                      case "num":
                        r.attr("placeholder") &&
                        r.val() == r.attr("placeholder")
                          ? (v = !1)
                          : h
                          ? !d &&
                            (d = u.validators.numChk(
                              r.val(),
                              k[f].split(":")[1]
                            ))
                          : ((v = u.validators.numChk(
                              r.val(),
                              k[f].split(":")[1]
                            )),
                            (g = k[f].split(":")[1]));
                        break;
                      case "float":
                        r.attr("placeholder") &&
                        r.val() == r.attr("placeholder")
                          ? (v = !1)
                          : h
                          ? !d &&
                            (d = u.validators.floatChk(
                              r.val(),
                              k[f].split(":")[1]
                            ))
                          : ((v = u.validators.floatChk(
                              r.val(),
                              k[f].split(":")[1]
                            )),
                            (g = k[f].split(":")[1]));
                        break;
                      case "alphanum":
                        r.attr("placeholder") &&
                        r.val() == r.attr("placeholder")
                          ? (v = !1)
                          : h
                          ? !d &&
                            (d = u.validators.alphanumChk(
                              r.val(),
                              k[f].split(":")[1]
                            ))
                          : ((v = u.validators.alphanumChk(
                              r.val(),
                              k[f].split(":")[1]
                            )),
                            (g = k[f].split(":")[1]));
                        break;
                      case "email":
                        r.attr("placeholder") &&
                        r.val() == r.attr("placeholder")
                          ? (v = !1)
                          : h
                          ? !d &&
                            (d = u.validators.emailChk(
                              r.val(),
                              k[f].split(":")[1]
                            ))
                          : ((v = u.validators.emailChk(
                              r.val(),
                              k[f].split(":")[1]
                            )),
                            (g = k[f].split(":")[1]));
                        break;
                      case "specialChar":
                        r.attr("placeholder") &&
                        r.val() == r.attr("placeholder")
                          ? (v = !1)
                          : h
                          ? !d &&
                            (d = u.validators.splChk(
                              r.val(),
                              k[f].split(":")[1]
                            ))
                          : ((v = u.validators.splChk(
                              r.val(),
                              k[f].split(":")[1]
                            )),
                            (g = k[f].split(":")[1]));
                        break;
                      case "charRange":
                        if (
                          r.attr("placeholder") &&
                          r.val() == r.attr("placeholder")
                        )
                          v = !1;
                        else {
                          var C = (E = r).attr("minL")
                              ? E.attr("minL")
                              : E.attr("minlength"),
                            b = E.attr("maxL")
                              ? E.attr("maxL")
                              : E.attr("maxlength"),
                            $ = "";
                          ($ =
                            E.attr("scope") && "" != E.attr("scope")
                              ? E.attr("scope")
                              : "in"),
                            h
                              ? !d &&
                                (d = u.validators.rangeChk(E.val(), C, b, $))
                              : ((v = u.validators.rangeChk(E.val(), C, b, $)),
                                (g = k[f].split(":")[1]));
                        }
                        break;
                      case "valRange":
                        if (
                          r.attr("placeholder") &&
                          r.val() == r.attr("placeholder")
                        )
                          v = !1;
                        else {
                          var E,
                            y = (E = r).attr("minval")
                              ? parseFloat(E.attr("minval"))
                              : parseFloat(E.attr("minV")),
                            x = E.attr("maxval")
                              ? parseFloat(E.attr("maxval"))
                              : parseFloat(E.attr("maxV"));
                          $ = "";
                          ($ =
                            E.attr("scope") && "" != E.attr("scope")
                              ? E.attr("scope")
                              : "in"),
                            h
                              ? !d &&
                                (d = u.validators.rangeVChk(E.val(), y, x, $))
                              : ((v = u.validators.rangeVChk(E.val(), y, x, $)),
                                (g = k[f].split(":")[1]));
                        }
                        break;
                      case "checked":
                        if (h) {
                          if ("checkbox" == r.attr("type")) {
                            for (
                              var V = r;
                              "form" != V.get(0).nodeName.toLowerCase();

                            )
                              V = V.parent();
                            !d && (d = u.validators.checkedChk(r, V.get(0)));
                          } else if ("radio" == r.attr("type")) {
                            for (
                              V = r;
                              "form" != V.get(0).nodeName.toLowerCase();

                            )
                              V = V.parent();
                            !d && (d = u.validators.checkedRadChk(r, V.get(0)));
                          }
                        } else
                          "checkbox" == r.attr("type")
                            ? (v = u.validators.checkedChk(r, l))
                            : "radio" == r.attr("type") &&
                              (v = u.validators.checkedRadChk(r, l)),
                            (g = k[f].split(":")[1]);
                        break;
                      case "selected":
                        h
                          ? !d && (d = u.validators.selectedChk(r))
                          : ((v = u.validators.selectedChk(r)),
                            (g = k[f].split(":")[1]));
                        break;
                      case "custom":
                        if (
                          ((c =
                            r.attr("placeholder") &&
                            r.val() == r.attr("placeholder")
                              ? ""
                              : r.val()),
                          h)
                        )
                          (S = (0, u.errs[k[f].split(":")[1]])(r, !0))
                            .constructor === Object && (S = S.msg),
                            S && (S = !0),
                            !d && (d = S);
                        else if (u.errs[k[f].split(":")[1]])
                          var S = (0, u.errs[k[f].split(":")[1]])(r);
                        (v = S && S.constructor === Object ? S.msg : S),
                          (g = S);
                    }
                return h
                  ? d
                  : v && !m
                  ? (u.heighlightErrOk(g, r, l, "err", s, n, i, o),
                    (u.lastErr = r),
                    !1)
                  : v && m
                  ? (u.heighlightErrOk(g, r, l, "sMnd", s, n, i, o),
                    (u.lastErr = u.lastErr),
                    !0)
                  : (u.heighlightErrOk(g, r, l, "ok", s, n, i, o), !0);
              }
            },
            heighlightErrOk: function (r, a, l, s, n, i, o, c) {
              var u,
                h,
                p = t,
                d = null,
                m = p.errs[r] || r,
                f = a.attr("id") + "_err",
                v = a.attr("name") + "_err",
                g = $(l).find(".erLbl"),
                k = a.attr("id") || a.attr("name"),
                C = null,
                b = $(l).attr("name");
              if (
                (r &&
                  r.constructor === Object &&
                  !p.errs[r] &&
                  ((m = r.msg),
                  r.id && (f = v = r.id),
                  r.errorField && (C = r.errorField)),
                m && m.constructor === Object)
              ) {
                var E = m;
                (m = E.msg),
                  E.id && (f = v = E.id),
                  E.errorField && (C = E.errorField);
              }
              for (u = 0; u < g.length; u++)
                (g.eq(u).attr("id") != f && g.eq(u).attr("id") != v) ||
                  (d = g.eq(u));
              var y,
                x = null;
              if (p[b].pExist)
                for (y = 0; y < p[b].pLevel; y++)
                  if (a.parents().eq(y).hasClass(p[b].pExist)) {
                    x = a.parents().eq(y);
                    break;
                  }
              if ("err" == s) {
                if (x && x.length > 0)
                  x.removeClass(n + " " + i + " " + o),
                    setTimeout(function () {
                      x.addClass(n);
                    }, 0);
                else {
                  if (C)
                    $(l)
                      .find(C)
                      .removeClass(n + " " + i + " " + o)
                      .addClass(n);
                  else a.removeClass(n + " " + i + " " + o).addClass(n);
                  d &&
                    (d.removeClass(i + " " + o),
                    !d.hasClass(n) && c && d.addClass(n));
                }
                if (d) {
                  var V = a.attr("minL") || a.attr("minlength"),
                    S = a.attr("maxL") || a.attr("maxlength"),
                    A = a.attr("minV") || a.attr("minval"),
                    w = a.attr("maxV") || a.attr("maxval");
                  d.attr("id");
                  if (a.val() && a.val().indexOf("$") >= 0)
                    var L = a.val().replace(/\$/g, "$$$");
                  (m = m
                    .replace("[MinL]", V)
                    .replace("[MaxL]", S)
                    .replace("[MinV]", A)
                    .replace("[MaxV]", w)
                    .replace(
                      "[currVal]",
                      L
                        ? L.toString()
                            .replace(/</g, "&lt;")
                            .replace(/>/g, "&gt;")
                        : ""
                    )),
                    c && d.html(m),
                    (p.erArry[k] = m),
                    (h = a.attr("name") || a.attr("id") || a.get(0).nodeName),
                    (p.erArryExt[h] = m);
                }
                $(l).attr("chk", "true"),
                  e ||
                    !p.onErr ||
                    $.isEmptyObject(p.erArryExt) ||
                    p.onErr({
                      err: p.erArryExt,
                      formName: l.name,
                      node: a[0],
                      isSubmit: e,
                    });
              } else if ("ok" == s) {
                if (x && x.length > 0)
                  x.removeClass(n + " " + i + " " + o).addClass(i);
                else if (C)
                  $(l)
                    .find(C)
                    .removeClass(n + " " + i + " " + o)
                    .addClass(i);
                else a.removeClass(n + " " + i + " " + o).addClass(i);
                d && (d.html(""), d.removeClass(n + " " + o)),
                  !e &&
                    p.onValid &&
                    ((h = a.attr("name") || a.attr("id") || a.get(0).nodeName),
                    (p.erArryExt[h] = null),
                    p.onValid({
                      err: p.erArryExt,
                      formName: l.name,
                      node: a[0],
                      isSubmit: e,
                    }));
              } else if ("sMnd" == s) {
                if (
                  (x && x.length > 0
                    ? x.removeClass(n + " " + i + " " + o).addClass(o)
                    : (a.removeClass(n + " " + i + " " + o).addClass(o),
                      d &&
                        (d.removeClass(n + " " + i),
                        !d.hasClass(o) && c && d.addClass(o))),
                  d)
                ) {
                  (V = a.attr("minL") || a.attr("minlength")),
                    (S = a.attr("maxL") || a.attr("maxlength")),
                    (A = a.attr("minV") || a.attr("minval")),
                    (w = a.attr("maxV") || a.attr("maxval")),
                    d.attr("id");
                  (m = m
                    .toString()
                    .replace("[MinL]", V)
                    .replace("[MaxL]", S)
                    .replace("[MinV]", A)
                    .replace("[MaxV]", w)
                    .replace(
                      "[currVal]",
                      a.val().replace(/</g, "&lt;").replace(/>/g, "&gt;")
                    )),
                    c && d.html(m),
                    (p.erArry[k] = m);
                }
              } else
                "rem" == s &&
                  (x && x.length > 0
                    ? x.removeClass(n + " " + o)
                    : (a.removeClass(n + " " + o),
                      d && d.removeClass(n + " " + o)),
                  d && d.html(""));
            },
            validators: {
              reqChk: function (e, r) {
                var a = /^\s*$/;
                return (
                  t.errs[r] && (a = new RegExp(t.errs[r].regEx || a)),
                  !!a.test(e)
                );
              },
              alphadsChk: function (e, r) {
                var a = /^[a-zA-Z.\s]+$/;
                return (
                  t.errs[r] && (a = new RegExp(t.errs[r].regEx || a)),
                  "" != e && (0 == (e = $.trim(e)).indexOf(".") || !a.test(e))
                );
              },
              alphaChk: function (e, r) {
                var a = /^[a-zA-Z]+$/;
                return (
                  t.errs[r] && (a = new RegExp(t.errs[r].regEx || a)),
                  "" != e && !a.test($.trim(e))
                );
              },
              numChk: function (e, r) {
                var a = /^[-]?[0-9]+$/;
                return (
                  t.errs[r] && (a = new RegExp(t.errs[r].regEx || a)),
                  "" != e && !a.test($.trim(e))
                );
              },
              floatChk: function (e, r) {
                var a = /^[-]?[0-9]+(\.[0-9]+)?([eE][+-]?[0-9]+)?$/;
                return (
                  t.errs[r] && (a = new RegExp(t.errs[r].regEx || a)),
                  "" != e && !a.test($.trim(e))
                );
              },
              alphanumChk: function (e, r) {
                var a = /^[a-zA-Z0-9]+$/;
                return (
                  t.errs[r] && (a = new RegExp(t.errs[r].regEx || a)),
                  "" != e && !a.test($.trim(e))
                );
              },
              emailChk: function (e, r) {
                var a = /^([0-9a-zA-Z]([\.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,4})$/;
                return (
                  t.errs[r] && (a = new RegExp(t.errs[r].regEx || a)),
                  "" != e && !a.test($.trim(e))
                );
              },
              splChk: function (e, r) {
                var a = /^[a-zA-Z\d\s]+$/;
                return (
                  t.errs[r] && (a = new RegExp(t.errs[r].regEx || a)),
                  "" != e && !a.test($.trim(e))
                );
              },
              rangeChk: function (e, t, r, a) {
                if (((r && "" != r) || (r = e.length + 1), "" == e)) return !1;
                (a = a || "in"), (e = new String(e));
                if ("in" == a)
                  return (e.length < t || e.length > r) && t + ":" + r;
                if ("out" == a) {
                  if (!(e.length > t)) return !1;
                  if (e.length < r) return t + ":" + r;
                }
              },
              rangeVChk: function (e, t, r, a) {
                if ("" == e) return !1;
                if ("in" == (a = a || "in"))
                  return (
                    (parseFloat($.trim(e)) < t || parseFloat($.trim(e)) > r) &&
                    t + ":" + r
                  );
                if ("out" == a) {
                  if (!(parseFloat($.trim(e)) > t)) return !1;
                  if (parseFloat($.trim(e)) < r) return t + ":" + r;
                }
              },
              checkedRadChk: function (e, t) {
                var r,
                  a = !1,
                  l = $(t).find("input[type=radio]");
                for (r = 0; r < l.length; r++)
                  l.eq(r).attr("name") == e.attr("name") &&
                    l.eq(r).is(":checked") &&
                    (a = !0);
                return !a;
              },
              checkedChk: function (e, t) {
                var r,
                  a = !1,
                  l = $(t).find("input[type=checkbox]");
                for (r = 0; r < l.length; r++)
                  l.eq(r).attr("name") == e.attr("name") &&
                    l.eq(r).is(":checked") &&
                    (a = !0);
                return !a;
              },
              checkedChkSrv: function (e) {
                return null == e || "" == e;
              },
              selectedChk: function (e) {
                return 0 == e.get(0).selectedIndex;
              },
              selectedChkSrv: function (e, t) {
                return e == t;
              },
            },
            getFrmElms: function (e, t) {
              var r,
                a = [],
                l = e.get(0).elements;
              for (r = 0; r < l.length; r++) {
                var s = l[r].nodeName.toLowerCase();
                t
                  ? ("input" != s && "select" != s && "textarea" != s) ||
                    "submit" == $(l[r]).attr("type") ||
                    "" == $(l[r]).attr("placeholder") ||
                    a.push($(l[r]))
                  : ("input" != s && "select" != s && "textarea" != s) ||
                    "submit" == $(l[r]).attr("type") ||
                    !$(l[r]).attr("rel") ||
                    "" == $(l[r]).attr("rel") ||
                    a.push($(l[r]));
              }
              return a;
            },
            getSbtBtns: function (e, t, r) {
              var a,
                l,
                s = [],
                n = e.find("input[type=submit], button[type=submit]");
              if ((n.length > 0 && s.push(n), t))
                if (t.constructor === Array)
                  for (a = 0; a < t.length; a++)
                    s.push($("#" + t[a])), (l += "#" + t[a] + ",");
                else s.push($("#" + t)), (l = "#" + t);
              return r ? [s, l.replace(/,+$/, "")] : s;
            },
            showHideElement: function (e, r) {
              var a = t;
              if ((e = e || null).length)
                if (e.constructor === Array)
                  for (var l = 0; l < e.length; l++)
                    "string" == typeof e[0]
                      ? a.processAltRel($("#" + e[l]), r)
                      : a.processAltRel(e[l], r);
                else
                  e instanceof Object
                    ? a.processAltRel(e, r)
                    : a.processAltRel($("#" + e), r);
            },
            hideElement: function (e) {
              t.showHideElement(e, "h");
            },
            showElement: function (e) {
              t.showHideElement(e, "s");
            },
            processAltRel: function (e, t) {
              (e = "String" == typeof e ? $("#" + e) : e),
                "s" == t
                  ? e.attr("rel", e.attr("altrel"))
                  : "h" == t &&
                    (!e.attr("altrel") && e.attr("altrel", e.attr("rel")),
                    e.removeAttr("rel"));
            },
            supportPlaceholder: function () {
              return "placeholder" in document.createElement("input");
            },
            fillVal: function (e) {
              if (e.constructor === Object)
                for (var t in e)
                  $("#" + t)
                    .val(e[t])
                    .css({ color: "" });
            },
            getErrorStatus: function (e) {
              return t.erArryExt;
            },
          };
        return {
          validate: t.validate,
          showElement: t.showElement,
          hideElement: t.hideElement,
          isValid: t.isValid,
          checkValids: t.checkValids,
          fillVal: t.fillVal,
          setDefaultValues: t.setDefaultValues,
          sanitizeDefaultValues: t.sanitizeDefaultValues,
          isValidSrv: t.isValidSrv,
          validators: t.validators,
          getErrorStatus: t.getErrorStatus,
        };
      };
    },
  },
]);
